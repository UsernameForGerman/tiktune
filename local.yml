version: '3'

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  local_traefik: {}
  static-volume: {}
  media-volume: {}
  react-app-volume: {}

services:
  react: &react
    #env_file:
    #  - ./.envs/.local/.react
    #environment:
    #  - TIKTUNE_API_URL=http://localhost:80/
    build:
      context: .
      dockerfile: ./compose/react/Dockerfile
      #args:
      #  TIKTUNE_API_URL: $TIKTUNE_API_URL
    command: ["nginx", "-g", "daemon off;"]
    depends_on:
      - django
      - postgres
    image: tiktune_local_react
#    restart: always
    volumes:
      - react-app-volume:/frontend/build
    ports:
      - "80:80"
      - "443:443"

  django: &django
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    command: /start
    #command: python /app/manage.py runserver 0.0.0.0:9000
    image: tiktune_local_django
    restart: always
    depends_on:
      - postgres
      - redis
      - rabbit
    volumes:
      # - static-volume:/var/tiktune/static
      - static-volume:/app/static
      - media-volume:/var/tiktune/media
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    ports:
      - "9000:9000"

  postgres:
    build:
      context: .
      dockerfile: ./compose/postgres/Dockerfile
    image: tiktune_local_postgres
    restart: always
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
      - local_postgres_data_backups:/backups
    ports:
      - "5432:5432"
    env_file:
      - ./.envs/.local/.postgres

  redis:
    image: redis:3.2
    restart: always
    # labels:
    #   - "traefik.enable=true"
    ports:
      - "6379"

  rabbit:
    image: rabbitmq:3.8-alpine
    restart: always
    env_file:
      - ./.envs/.local/.django
    ports:
      - "5672"

  celeryworker:
    <<: *django
    image: tiktune_local_celeryworker
    restart: always
    depends_on:
      - redis
      - rabbit
      - postgres
    ports: []
    command: /start-celeryworker

  flower: &flower
    <<: *django
    image: tiktune_local_celeryflower
    restart: always
    ports:
      - "5555:5555"
    command: /start-flower

#  nginx: &nginx
#    restart: always
#    build:
#      context: .
#      dockerfile: ./compose/nginx/Dockerfile
#    image: nginx_local
#    # image: nginx:apline
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - static-volume:/www/static
#      - media-volume:/www/media
#      - react-app-volume:/frontend/build
#      - ./nginx:/etc/nginx/conf.d
#    depends_on:
#      - django
#      - postgres
#      - react

